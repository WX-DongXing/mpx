<template>
  <view class="number-scroll-animation">
    <block wx:for="{{columns}}" wx:key="index">
      <view wx:if="{{item === '.'}}" wx:key="index" class="item-separator" wx:class="{{options.className}}"></view>
      <view wx:else class="viewport" wx:key="index" style="height:{{configData.height}}px;line-height:{{configData.height}}px;">
        <view class="column-wrap" style="transform: translate3d(0, -{{keys[index] * configData.height}}px, 0);transition-duration:{{configData.during}}s; transition-timing-function:{{configData.ease}};">
          <view
            wx:for="{{item}}" 
            wx:for-item="row"
            wx:for-index="idx"
            wx:key="idx" 
            class="item"
            style="height:{{configData.height}}px;line-height: {{configData.height}}px;{{configData.columnStyle}}">{{row}}</view>
        </view>
      </view>
    </block>
  </view>
</template>
<script>
import { createComponent } from '@mpxjs/core'

const separator = '.'
const CONFIG = {
  during: 1, // :number 动画时间
  height: 80, // :number 滚动行高 px
  width: '24', // 组件整体宽度
  cellWidth: 24,
  ease: 'cubic-bezier(0.66, 0, 0.34, 1)', // 动画过渡效果
  // color: '#EE5538', // 字体颜色
  columnStyle: '' // 字体单元 覆盖样式
}
const COMPONENT_NAME = 'biz-number-animation'

createComponent({
  name: COMPONENT_NAME,
  properties: {
    value: {
      type: [Number, String],
      value: 0
    },
    options: {
      type: Object,
      value: {}
    }
  },
  data () {
    return {
      columns: [0],
      keys: [],
      configData: JSON.parse(JSON.stringify(CONFIG))
    }
  },
  attached () {
    this.$nextTick(() => {
      setTimeout(() => {
        this.setRange()
        this.renderStyle()
      }, 400)
    })
  },
  beforeDestroy () {
    // cancelAnimationFrame(this.animationHandler)
  },
  methods: {
    setRange () {
      let value = this.value // Math.min(this.maxValue, this.value)
      const columns = this.initColumn(value)
      this.columns = columns
      // 范围调整后，修正当前 value
      if (this.value) {
        this.run(this.value)
      }
    },
    initColumn (n) {
      const strNum = (n + '')
      const numArr = strNum.split('')
      let arr = []
      let rows = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']
      numArr.map((item) => {
        if (item === separator) {
          arr.push(separator)
        } else {
          arr.push(rows.slice(0, rows[+item + 1]))
        }
      })
      return arr
    },
    run (n) {
      let value = Number(n)
      let valueArr = value.toString().split('')
      // fixed 只有第一个有动画
      setTimeout(() => {
        this.keys = valueArr // indexs
      }, 50)
    },
    renderStyle () {
      /**
       * color,
       * columnStyle,
       * width,
       * height,
       * during,
       * ease
       */
      let options = this.options
      let configData = this.configData
      console.log('options:', options)
      Object.keys(options).map(i => {
        let val = options[i]
        switch (i) {
          case 'during':
          case 'height':
          case 'cellWidth':
            if (parseInt(val) || val === 0 || val === '0') {
              configData[i] = val
            }
            break
          default:
            val && (configData[i] = val)
            break
        }
      })
      this.configData = configData
    }
  }
})
</script>
<style lang='stylus'>
@import "../../common/stylus/mixin.styl"
.number-scroll-animation
  /* width: 100% */
  height: 100%
  display: flex
  justify-content: center
  align-items flex-end
.viewport
  width: auto
  overflow: hidden
  font-size 100%
.item-separator
  width 6px
  height 6px
  background-color #EE5538
  margin-bottom vw(10)
  margin-right 5px
  margin-left 5px
  &.reward-small
    margin-bottom 8px
.column-wrap
  display inline-block
  width: 100%
  transform: translate3d(0, 0, 0)
  transition: all 10s cubic-bezier(0, 1, 0, 1)
  transition-delay: 0.4s
.item
  font-family dinum
  width: 100%
  height: 100%
  text-align: center
</style>
 
<script type="application/json">
  {
    "component": true
  }
</script>